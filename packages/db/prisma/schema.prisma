generator client {
  provider = "prisma-client-js"
  // output = "../node_modules/.prisma/client"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Product {
  id                      String   @id @db.VarChar(30) @unique
  owner_id                String   @db.VarChar(30)
  product_name            String   @db.VarChar(255)
  publisher_name          String   @db.VarChar(255)
  home_page_url           String?  @db.VarChar(500)
  contact_page_url        String?  @db.VarChar(500)
  privacy_notice_page_url String?  @db.VarChar(500)
  contact_sales_email     String?  @db.VarChar(255)
  contact_sales_url       String?  @db.VarChar(500)
  contact_support_email   String?  @db.VarChar(255)
  contact_support_url     String?  @db.VarChar(500)
  is_setup_complete       Boolean?

  on_access_denied_url          String? @db.VarChar(500)
  on_access_granted_url         String? @db.VarChar(500)
  on_no_seat_available_url      String? @db.VarChar(500)
  on_subscription_not_ready_url String? @db.VarChar(500)
  on_subscription_canceled_url  String? @db.VarChar(500)
  on_subscription_suspended_url String? @db.VarChar(500)
  on_subscription_not_found_url String? @db.VarChar(500)
  on_no_subscriptions_found_url String? @db.VarChar(500)

  seatingConfig SeatingConfig @relation(fields: [id], references: [owner_id])
  owner User @relation(fields: [owner_id], references: [id])

  @@index([owner_id])
}

enum SeatingStrategyName {
  monthly_active_user 
  first_come_first_served
}

model SeatingConfig {
  owner_id                               String   @id @db.VarChar(30) @unique
  default_low_seat_warning_level_percent Float
  seating_strategy_name                  SeatingStrategyName
  low_seat_warning_level_pct             Float?
  limited_overflow_seating_enabled       Boolean?
  seat_reservation_expiry_in_days        Int?
  default_seat_expiry_in_days            Int?

  publisher    Product?      
  subscription Subscription?

  @@index([owner_id])
}

model SeatOccupant {
  seat_id   String  @id @db.VarChar(30) @unique
  user_id   String  @db.VarChar(30)
  tenant_id String  @db.VarChar(30)
  email     String? @db.VarChar(255)
  user_name String? @db.VarChar(255)

  seat Seat @relation(fields: [seat_id], references: [id])
}

model SeatReservation {
  seat_id    String  @id @db.VarChar(30) @unique
  tenant_id  String? @db.VarChar(30)
  user_id    String? @db.VarChar(30)
  email      String? @db.VarChar(255)
  invite_url String? @db.VarChar(500)

  seat Seat @relation(fields: [seat_id], references: [id])
}

model SeatSummary {
  subscription_id     String @id @db.VarChar(30)
  standard_seat_count Int
  limited_seat_count  Int

  subscription Subscription @relation(fields: [subscription_id], references: [id])

  @@index([subscription_id])
}


enum SeatType {
  standard
limited
}

model Seat {
  id                    String    @id @db.VarChar(30)
  seating_strategy_name SeatingStrategyName
  subscription_id       String?   @db.VarChar(30)
  created_utc           DateTime? @db.DateTime(0)
  seat_type             SeatType
  expires_utc           DateTime? @db.DateTime(0)
  redeemed_utc          DateTime? @db.DateTime(0)

  reservation SeatReservation?
  occupant SeatOccupant?
}

model Subscription {
  id                     String   @id @db.VarChar(30) @unique
  product_id             String   @db.VarChar(30)
  is_setup_complete      Boolean?
  created_utc            DateTime? @db.DateTime(0)
  tenant_id              String?   @db.VarChar(30)
  subscriber_info        Json?
  source_subscription    Json?
  subscription_name      String?   @db.VarChar(255)
  tenant_name            String?   @db.VarChar(255)
  offer_id               String?   @db.VarChar(30)
  plan_id                String?   @db.VarChar(30)
  state                  String    @db.VarChar(15)
  admin_role_name        String?   @db.VarChar(50)
  user_role_name         String?   @db.VarChar(50)
  management_urls        Json?
  admin_name             String?   @db.VarChar(50)
  admin_email            String?   @db.VarChar(255)
  total_seats            Int?
  is_being_configured    Boolean?
  is_free_trial          Boolean?
  is_test_subscription   Boolean?
  state_last_updated_utc DateTime? @db.DateTime(0)

  seatingConfig SeatingConfig @relation(fields: [id], references: [owner_id])
  seatSummary   SeatSummary?
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  products      Product[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
