import { apiKeyPrefixes } from "./../../../../packages/core/src/common/api";
import { ctx } from "./../context";
import { keysApi } from "@dotinc/bouncer-core";
import generateApiKey from "generate-api-key";

export const keysRouter = ctx.router(keysApi);

keysRouter.post("keys/:type/:ownerId", async (req, res) => {
  const type = req.params.type;
  const ownerId = req.params.ownerId;
  const key = generateApiKey({ length: 28, prefix: apiKeyPrefixes[type] });

  // publisher keys can only be generated by the system key
  if (!req.apiKey.startsWith(apiKeyPrefixes["system"])) {
    return res.status(403).json({
      code: 403,
      message: `Forbidden. Cannot generate API key`,
    });
  }

  if (typeof key !== "string") {
    return res.status(500).json({
      code: 500,
      message: `Api key generation for [${type}, ${ownerId}] failed.`,
    });
  }

  const apiKey = await req.repo.createApiKey({
    owner_id: ownerId,
    type,
    key,
  });

  return res.status(200).json(apiKey);
});

keysRouter.delete("keys/:type/:ownerId", async (req, res) => {
  const type = req.params.type;
  const ownerId = req.params.ownerId;
  const key = req.body;

  // publisher keys can only be deleted by themselves or by the system key
  if (
    !req.apiKey.startsWith(apiKeyPrefixes["system"]) &&
    req.apiKey !== key.key
  ) {
    return res.status(403).json({
      code: 403,
      message: `Forbidden. Cannot delete API key`,
    });
  }

  await req.repo.deleteApiKey(key);

  return res.status(200).json({});
});
